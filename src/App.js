import React, { useEffect, useState } from "react";
import "./App.css";
import axios from "axios";
import Pages from "./components/Pages";
import Pagination from "./components/Pagination";

function App(props) {
  // загальний стейт для нашої сторінки
  const [photos, setPhotos] = useState([]);
  // прописуємо стан для завантаження
  const [loading, setLoading] = useState(false);
  // прописуємо стан для сторінки, яку потрібно подавати. По дефолту це буде 1(перша сторінка)
  const [currentPage, setCurentPage] = useState(1);
  // і ще один стейт в якому будемо зберігати кількість елементів, яку будемо показувати на сторінці.
  // Ми його міняти не будемо тому можемо вказати один аргумент без сет
  const [countElement] = useState(10);

  // робимо
  useEffect(() => {
    setLoading(false);
    axios.get("https://jsonplaceholder.typicode.com/photos").then((res) => {
      setPhotos(res.data);
    });
  }, []);

  // *?/ //////////////////
  // *! Далі нам потрібно кудись виводити наші окремі сторінки.
  //*! Тому ствоюємо ще одну компоненту, назвемо її Pages

  // Для цього створюємо дві комстанту, які будуть визначати перший та  останій індекси.
  const lastPhotoIndex = currentPage * countElement;
  //  Для першого індекса нам потрібно від індекса останього елемента відняти к-ть елементів на одній сторінці
  const firstPhotoIndex = lastPhotoIndex - countElement;
  // і ще одна константа, через яку нам потрібно отримати поточну сторінку
  //*? беремо наш масив Photos, примяніємо до нього метод slice, щоб вирізати ті елементи
  //? які нам потрібні. Давайте пригадаємо, що таке метод slice. Як аргументи передаємо йому наші перший
  //*? та останій елементи які ми визначили у попередніх константах
  const currentPhotos = photos.slice(firstPhotoIndex, lastPhotoIndex);
  //*! Тут ми закінчили.Тепер нам потрібно якось відобразити нашу пагінацію.
  // *!  Для цього створюємо ще одну компоненту pagination

  // Нам залишається зробити щоб зміст нашої сторінки змінувався при клікові на окремі номери сторінки
  // Для цього ми створимо функцію, яка отримувати та повертати поточну сторінку
  // Назвемо функцію PaginationPoint
  // Вуна буде приймати якийсь PageNumber і беде змінювати наш стейт фактичної сторінки на PageNumber
  const paginationPoint = (pageNumber) => setCurentPage(pageNumber);
  // Далі нам потрібно її передати в компоненту Pagination

  // Створюємо функцію для перимикання кнопками. Ця функція бере функцію яка встановлює нашу поточну сторінку
  // setCurentPage і як аргумент ми будемо приймати певне попереднє значення і будемо збільшувати його на 1
  const NextPage = () => {
    setCurentPage((prev) => prev + 1);
  };
  const PrevPage = () => {
    setCurentPage((prev) => prev - 1);
  };

  return (
    <div className="App">
      <h1>Photos</h1>
      {/* імпортуємо нашу компоненту та передаємо їй наші отримані дані через пропси, але зверніть увагу передаємо не весь наш масив photos,
      а лише його частину, яка є у currentPhotos */}
      <Pages photos={currentPhotos} loading={loading} />
      {/* кількість елементів ми передаємо з нашого стетйта, загальну кількість елементів буде становити довжина масиву photos */}
      {/* (тобто нашого основного стейту) */}
      <Pagination
        countElement={countElement}
        totalCountElement={photos.length}
        // передаємо нашу вункцію так само через пропси
        paginationPoint={paginationPoint}
        // далі нам потрібно цю функцію через обробник подій onClick повішати на наші кнопки
      />

      {/* Все наче бто добре але варто же додати кнопки вперед та назад. Щоб було зручніше управляти списком. 
      Створюємо дві кнопки */}
      <button onClick={PrevPage}>Prev</button>
      <button onClick={NextPage}>Next</button>
      {/* кнопки додали. Тепер нам потрібно створити функцію, яка буде збвільшувати або зменшувати нашу
       поточну сторінку на 1. Створимо функцію NextPage та PrevPage */}
    </div>
  );
}

export default App;

// Після того як підлатали стилі, давайте первіримо чи все праює.
//  Змінимо кількість елементів на сторінці з 10 на 500. Перевіряємо все ок
// Нам залишається зробити щоб зміст нашої сторінки змінувався при клікові на окремі номери сторінки
// Для цього ми створимо функцію, яка отримувати та повертати поточну сторінку
// Назвемо функцію PaginationPoint
